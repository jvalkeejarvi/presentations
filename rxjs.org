#+TITLE: RxJS
#+OPTIONS: num:nil toc:nil reveal_history:t reveal_pdfseparatefragments:nil reveal_slide_number:t reveal_fragmentinurl:t
#+AUTHOR: Juuso Valkeej√§rvi
#+EXPORT_FILE_NAME: docs/rxjs
#+REVEAL_THEME: black
#+REVEAL_HLEVEL: 1
#+REVEAL_TRANS: fade
#+REVEAL_TITLE_SLIDE: <h1>%t</h1><h3>%a</h3><p>(Thanks to Sipi for some code examples)</p>
#+REVEAL_ROOT: https://revealjs.com/
# #+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.9.2
# #+REVEAL_ROOT: /home/juuso/git/reveal.js/
#+REVEAL_PLUGINS: (markdown highlight notes)
#+REVEAL_DEFAULT_FRAG_STYLE: appear
#+REVEAL_MARGIN: 0.05
#+REVEAL_MAX_SCALE: 2
#+PROPERTY: header-args :exports code
#+REVEAL_HIGHLIGHT_CSS: %r/lib/css/monokai.css
#+REVEAL_EXTRA_CSS: reveal-code.css
* RxJS
  #+ATTR_REVEAL: :frag (appear)
  - library for reactive programming
  - implementations for other languages exist (RxJava, Rx.NET...)
  - uses observables instead of promises for async code
  - comes with multiple operators
* Major differences between observables and promises
  #+ATTR_REVEAL: :frag (appear)
- promises are eager, code is executed even before calling then
- observables are lazy, code is executed just when it is subscribed
- observables can be synchronous
- observables are steams, they can emit 0..n times, promises emit only once
* Subjects vs Observables
  #+ATTR_REVEAL: :frag (appear)
- subject is subtype of observable
- subjects keep state of their observers
- next can be explicitly called on subjects
* Different kind of subjects
** Subject
   #+ATTR_REVEAL: :frag (appear)
 - cannot have initial value
 - late subscribers don't get last emitted value
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|1|4-6|9-11"
   #+begin_src typescript
     private dateString$ = new Subject();

     public constructor() {
       this.dateString$.subscribe(
         value => console.log(value);
       )
     }

     public onClick() {
       this.dateString$.next(new Date().toString());
     }
   #+end_src
** ReplaySubject
   #+ATTR_REVEAL: :frag (appear)
 - late subscribers get the latest value on subscription
   #+ATTR_REVEAL: :frag (appear)
   - word replay usually means that late subscribers get the value too, e.g. shareReplay
** BehaviorSubject
   #+ATTR_REVEAL: :frag (appear)
 - like ReplaySubject but initial value must be given
 - value property can be accessed without subscribing
   #+ATTR_REVEAL: :frag (appear)
   #+BEGIN_SRC typescript
     const data = new BehaviorSubject<string>('some string');
     console.log(data.value);
   #+END_SRC
** AsyncSubject
   #+ATTR_REVEAL: :frag (appear)
 - emits latest value when it completes
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|1|6-9|10|3"
   #+BEGIN_SRC typescript
     const data = new AsyncSubject<string>();
     data.subscribe(value => {
       console.log(value); /* only 'ddd' is logged */
     })

     data.next('aaa');
     data.next('bbb');
     data.next('ccc');
     data.next('ddd');
     data.complete();
   #+END_SRC
* Creation operators
** of
   #+ATTR_REVEAL: :frag (appear)
   - return given value as an observable
   - is run synchronously
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     of({ id: 3, name: 'nameValue' });
   #+end_src
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     /* FIRST is logged before SECOND */
     of('asdf').subscribe(() => {
       console.log('FIRST');
     });
     console.log('SECOND');
   #+end_src

** forkJoin
   #+ATTR_REVEAL: :frag (appear)
   - emits last value of each observable when they all have completed (like Promise.all)
   - never emits if any of observables does not complete
   - returns tuple of observables
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     /* Returns Observable<[string, number, boolean]> */
     forkJoin(
       of('stringValue'),
       of(333),
       doSomeBackendRequestReturningBoolean()
     )
   #+end_src
** combineLatest
   #+ATTR_REVEAL: :frag (appear)
   - emits first time when all observables have emitted
   - after that emits whenever any of the observables emits
   - works even when some observables complete
   - handy when multiple user events must update emitted value independently
   - return value is like with forkJoin
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     combineLatest(
       someUserEvent$, /* Does not complete */
       otherUserEvent$, /* Does not complete */
       doSomeBackendRequestReturningBoolean() /* Completes */
     )
   #+end_src
* Pipeable operators
** map
   #+ATTR_REVEAL: :frag (appear)
 - alternates emitted value in some way
 - not to be confused with Array.map
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     const userIds$ = userClient.findByName('Pena').pipe(
       /*
         TIn -> TOut, in this case: User[] -> User[]
         Function passed to map determines type of output Observable
       ,*/
       map(users => users.filter(u => u.enabled))
     );
   #+end_src
** filter
   #+ATTR_REVEAL: :frag (appear)
 - only values that pass given condition are emitted
 - not to be confused with Array.filter
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src html
     <input [formControl]="searchString" />
   #+end_src
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|7-8"
   #+begin_src typescript
     public readonly searchString = new FormControl('');
     public readonly searchResults$: Observable<User>;

     public constructor() {
       this.searchResults$ = this.searchString.valueChanges
         .pipe(
           /* don't continue if value is empty string */
           filter(value => value),
           switchMap(/* Do backend request */)
         );
     }
   #+end_src
** tap
   #+ATTR_REVEAL: :frag (appear)
 - used only for side-effects
 - has no effect on emitted value
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     const users$ = userClient.findByIds([1, 2, 3]).pipe(
       tap(users => console.log('Found users:', users))
     );
   #+end_src
** switchMap
   #+ATTR_REVEAL: :frag (appear)
 - completes previous observable
 - switch subscription to another observable
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     const enabledUsers$: Observable<User[]> = userClient.getEnabledUserIds().pipe(
       // TIn -> TOut, in this case: number[] -> User[]
       switchMap(ids => userClient.findByIds(ids))
     );
   #+end_src
*** Returning outer value with forkJoin
    #+ATTR_REVEAL: :frag (appear)
    #+ATTR_REVEAL: :code_attribs data-line-numbers="|2,5"
    #+begin_src typescript
      const data$ = getObservable().pipe(
        switchMap(
          ids => forkJoin(
            userClient.findByIds(ids),
            of(ids)
          )
        )
      );
    #+end_src
*** Returning outer value with resultSelector
    #+ATTR_REVEAL: :frag (appear)
    #+ATTR_REVEAL: :code_attribs data-line-numbers="|4"
    #+begin_src typescript
      const data$ = getObservable().pipe(
        switchMap(
          ids => userClient.findByIds(ids),
          (origValue, newValue) => [origValue, newValue]
        )
      );
    #+end_src
    #+HTML_HEADLINE_CLASS: red
*** *DON'T DO THIS*
    :PROPERTIES:
    :CUSTOM_ID: red
    :END:
    #+ATTR_REVEAL: :frag (appear)
    #+ATTR_REVEAL: :code_attribs data-line-numbers="1,5"
    #+begin_src typescript
      let intermediate: string;
      const data$ = getObservable()
        .pipe(
          tap(value => {
            intermediate = value;
          }),
          switchMap(ids => userClient.findByIds(ids))
        )
    #+end_src
    #+ATTR_REVEAL: :frag (appear)
    - intermediate variables make code more difficult to understand
    - avoid side-effects in observables
** catchError
   #+ATTR_REVEAL: :frag (appear)
 - handle errors and allow observable to emit
 - should be used always when observable is subscribed with async pipe and errors may occur
 - must return a new observable or observable won't emit
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     const gridData$: Observable<User[]> = userClient.getAll().pipe(
       /* TIn -> TOut, in this case User[] -> User[] */
       catchError(err => {
         console.log('Failed to get data from api', err);
         return of([]);
       })
     );
   #+end_src
** debounceTime
   #+ATTR_REVEAL: :frag (appear)
 - discard too frequent values
 - should be used in observables that emit on user inputs (clicks, typing etc.)
 - value is in milliseconds
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src html
     <input [formControl]="searchString" />
   #+end_src
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="7"
   #+begin_src typescript
     public readonly searchString = new FormControl('');
     public readonly searchResults$: Observable<User>;

     public constructor() {
       this.searchResults$ = this.searchString.valueChanges
         .pipe(
           debounceTime(300),
           switchMap(/* Do backend request */)
         );
     }
   #+end_src
** distinctUntilChanged
   #+ATTR_REVEAL: :frag (appear)
 - discard value if it has not changed
 - consider using [[https://www.learnrxjs.io/learn-rxjs/operators/filtering/distinctuntilkeychanged][distinctUntilKeyChanged]] for non-primitive values
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src html
     <input [formControl]="searchString" />
   #+end_src
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="8"
   #+begin_src typescript
     public readonly searchString = new FormControl('');
     public readonly searchResults$: Observable<User>;

     public constructor() {
       /* searchString.valueChanges emits primitive strings */
       this.searchResults$ = this.searchString.valueChanges
         .pipe(
           debounceTime(300),
           distinctUntilChanged(),
           switchMap(/* Do backend request */)
         );
     }
   #+end_src
** take
   #+ATTR_REVEAL: :frag (appear)
 - completes observable when it has emitted n values
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|10"
   #+begin_src typescript
     /*
       Waits until all inner observables have emitted.
       When they have, emits latest value of each and completes outer observable.
     ,*/
     combineLatest(
       someUserEvent$,
       otherUserEvent$,
       doSomeBackendRequestReturningBoolean()
     ).pipe(
       take(1)
     );
   #+end_src
** takeUntil
   #+ATTR_REVEAL: :frag (appear)
 - completes observable when given observable emits
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|1|13-15|9"
   #+begin_src typescript
     const destroy$ = new Subject<void>();

     public constructor() {
       combineLatest(
         someUserEvent$,
         otherUserEvent$,
         doSomeBackendRequestReturningBoolean()
       ).pipe(
         takeUntil(destroy$)
       );
     }

     public ngOnDestroy(): void {
       this.destroy$.next();
     }
   #+end_src
** shareReplay
   #+ATTR_REVEAL: :frag (appear)
    - share emitted value to multiple subscribers
    - give same subscription to every subscriber
    - allow late subscribers to get the latest value
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|11"
   #+begin_src typescript
     private readonly data$: Observable<string[]>;

     public constructor() {
       this.data$ = refresh$.pipe(
         switchMap(/* do some request*/)
         /*
           Same source is given to everyone accessing data$.
           Backend request is done only once
         ,*/
         shareReplay()
       );
     }
   #+end_src
** finalize
   #+ATTR_REVEAL: :frag (appear)
 - do something when observable completes
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|7-9"
   #+begin_src typescript
     public constructor() {
       combineLatest(
         someUserEvent$,
         otherUserEvent$,
         doSomeBackendRequestReturningBoolean()
       ).pipe(
         finalize(() => {
           console.log('COMBINELATEST HAS COMPLETED')
         })
       );
     }
   #+end_src
** startWith
   #+ATTR_REVEAL: :frag (appear)
   - emit given value as first
   - useful e.g. as initial value of formControl valueChanges observable
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|2-3"
   #+begin_src typescript
     combineLatest(
       someUserEvent$.pipe(startWith(5)),
       otherUserEvent$.pipe(startWith('asdf')),
       doSomeBackendRequestReturningBoolean()
     )
   #+end_src
* Good practices
  #+ATTR_REVEAL: :frag (appear)
- never reassing observables
- never nest subscriptions, use operators instead
- avoid explicit subscriptions in components, always use async pipe when possible
- ensure that subscriptions are always unsubscribed (even with completing observables)
- end observable property names with =$=
** Unsubscribing
   #+ATTR_REVEAL: :frag (appear)
   - unsubscribing cancels ongoing http request(s)
   - ways of unsubscribing
   #+ATTR_REVEAL: :frag (appear)
     - using async pipe
     - using takeUntil
     - storing subscription explicitly unsubscribing
*** Explicit unsubscribe
    #+ATTR_REVEAL: :code_attribs data-line-numbers="|1|6-8|12"
    #+begin_src typescript
      private subscription: Subscription;
      public data$: Observable<string[]>;

      public constructor(private dataService: DataService) {
        this.data$ = this.dataService.getData();
        this.subscription = this.data$.subscribe(data => {
          /* Do something with data */
        })
      }

      public ngOnDestroy(): void {
        this.subscription.unsubscribe();
      }
    #+end_src
*** Unsubscribe with takeUntil
    [[takeUntil][takeUntil]]
** Refreshing value of shared observable
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="1-2|5-9|11-12"
   #+begin_src typescript
     private readonly data$: Observable<SomeType>;
     private readonly refresh$ = new Subject();

     public constructor() {
       this.data$ = refresh$.pipe(
         switchMap(/* do some request*/)
         shareReplay({ refCount: true, bufferSize: 1})
       );
     }

     private refreshData(): void {
       this.refresh$.next();
     }
   #+end_src
* Pitfalls
** src_typescript{of()} with no parameters never emits
   #+ATTR_REVEAL: :frag (appear)
   Does not emit
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="4"
   #+BEGIN_SRC typescript
     this.stringData$ = this.service.getStringFromBackend()
       .pipe(
         map => /* Some operation */,
         catchError(() => of())
       );
   #+END_SRC

   #+ATTR_REVEAL: :frag (appear)
   Emits
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="4"
   #+BEGIN_SRC typescript
     this.stringData$ = this.service.getStringFromBackend()
       .pipe(
         map => /* Some operation */,
         catchError(() => of(''))
       );
   #+END_SRC
** shareReplay placement
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|2|5|3"
   #+begin_src typescript
     this.data$ = refresh$.pipe(
       switchMap(/* do some backend request*/)
       shareReplay()
       /* Manipulation below is done every time when there is a new subscription */
       map(data => /* manipulate data in some way */)
     );
   #+end_src
** shareReplay in services
   #+ATTR_REVEAL: :frag (appear)
   - it is not recommended to use refCount: true option
   - otherwise observable chain will start from beginning if observer amount drops to zero
** uncaught error completes observable
   #+ATTR_REVEAL: :frag (appear)
   #+begin_src typescript
     combineLatest(
       someUserEvent$,
       otherUserEvent$,
       /* Causes observable to complete without catchError operator */
       throwError('VIRHE')
     )
   #+end_src
** catchError placement
   #+ATTR_REVEAL: :frag (appear)
   - order of catchError operator matters, should be last in most cases
   #+ATTR_REVEAL: :frag (appear)
   #+ATTR_REVEAL: :code_attribs data-line-numbers="|3,5|4"
     #+begin_src typescript
       /* Observable won't emit if secondRequest errors */
       someObservable.pipe(
         switchMap(() => firstRequest()),
         catchError(() => of([])),
         switchMap(value => secondRequest(value))
       )
     #+end_src
